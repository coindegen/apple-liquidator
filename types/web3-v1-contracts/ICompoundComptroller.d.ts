/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewPendingImplementation = ContractEventLog<{
  oldPendingImplementation: string;
  newPendingImplementation: string;
  0: string;
  1: string;
}>;
export type NewImplementation = ContractEventLog<{
  oldImplementation: string;
  newImplementation: string;
  0: string;
  1: string;
}>;
export type NewPendingAdmin = ContractEventLog<{
  oldPendingAdmin: string;
  newPendingAdmin: string;
  0: string;
  1: string;
}>;
export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type Failure_uint256_uint256_uint256 = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type Failure_uint256_uint256_uint256 = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type ActionPaused_string_bool = ContractEventLog<{
  action: string;
  pauseState: boolean;
  0: string;
  1: boolean;
}>;
export type ActionPaused_address_string_bool = ContractEventLog<{
  cToken: string;
  action: string;
  pauseState: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type CompGranted = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type CompSpeedUpdated = ContractEventLog<{
  cToken: string;
  newSpeed: string;
  0: string;
  1: string;
}>;
export type ContributorCompSpeedUpdated = ContractEventLog<{
  contributor: string;
  newSpeed: string;
  0: string;
  1: string;
}>;
export type DistributedBorrowerComp = ContractEventLog<{
  cToken: string;
  borrower: string;
  compDelta: string;
  compBorrowIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DistributedSupplierComp = ContractEventLog<{
  cToken: string;
  supplier: string;
  compDelta: string;
  compSupplyIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MarketEntered = ContractEventLog<{
  cToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketExited = ContractEventLog<{
  cToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketListed = ContractEventLog<{
  cToken: string;
  0: string;
}>;
export type NewBorrowCap = ContractEventLog<{
  cToken: string;
  newBorrowCap: string;
  0: string;
  1: string;
}>;
export type NewBorrowCapGuardian = ContractEventLog<{
  oldBorrowCapGuardian: string;
  newBorrowCapGuardian: string;
  0: string;
  1: string;
}>;
export type NewCloseFactor = ContractEventLog<{
  oldCloseFactorMantissa: string;
  newCloseFactorMantissa: string;
  0: string;
  1: string;
}>;
export type NewCollateralFactor = ContractEventLog<{
  cToken: string;
  oldCollateralFactorMantissa: string;
  newCollateralFactorMantissa: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewLiquidationIncentive = ContractEventLog<{
  oldLiquidationIncentiveMantissa: string;
  newLiquidationIncentiveMantissa: string;
  0: string;
  1: string;
}>;
export type NewPauseGuardian = ContractEventLog<{
  oldPauseGuardian: string;
  newPauseGuardian: string;
  0: string;
  1: string;
}>;
export type NewPriceOracle = ContractEventLog<{
  oldPriceOracle: string;
  newPriceOracle: string;
  0: string;
  1: string;
}>;

export interface ICompoundComptroller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ICompoundComptroller;
  clone(): ICompoundComptroller;
  methods: {
    "pendingAdmin()"(): NonPayableTransactionObject<string>;

    "pendingAdmin()"(): NonPayableTransactionObject<string>;

    _setPendingAdmin(
      newPendingAdmin: string
    ): NonPayableTransactionObject<string>;

    "comptrollerImplementation()"(): NonPayableTransactionObject<string>;

    "comptrollerImplementation()"(): NonPayableTransactionObject<string>;

    _acceptImplementation(): NonPayableTransactionObject<string>;

    "pendingComptrollerImplementation()"(): NonPayableTransactionObject<string>;

    "pendingComptrollerImplementation()"(): NonPayableTransactionObject<string>;

    _setPendingImplementation(
      newPendingImplementation: string
    ): NonPayableTransactionObject<string>;

    _acceptAdmin(): NonPayableTransactionObject<string>;

    "admin()"(): NonPayableTransactionObject<string>;

    "admin()"(): NonPayableTransactionObject<string>;

    _become(unitroller: string): NonPayableTransactionObject<void>;

    _borrowGuardianPaused(): NonPayableTransactionObject<boolean>;

    _grantComp(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    _mintGuardianPaused(): NonPayableTransactionObject<boolean>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string
    ): NonPayableTransactionObject<void>;

    _setBorrowPaused(
      cToken: string,
      state: boolean
    ): NonPayableTransactionObject<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setCollateralFactor(
      cToken: string,
      newCollateralFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setCompSpeed(
      cToken: string,
      compSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setMarketBorrowCaps(
      cTokens: string[],
      newBorrowCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    _setMintPaused(
      cToken: string,
      state: boolean
    ): NonPayableTransactionObject<boolean>;

    _setPauseGuardian(
      newPauseGuardian: string
    ): NonPayableTransactionObject<string>;

    _setPriceOracle(newOracle: string): NonPayableTransactionObject<string>;

    _setSeizePaused(state: boolean): NonPayableTransactionObject<boolean>;

    _setTransferPaused(state: boolean): NonPayableTransactionObject<boolean>;

    _supportMarket(cToken: string): NonPayableTransactionObject<string>;

    accountAssets(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    allMarkets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    borrowAllowed(
      cToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    borrowCapGuardian(): NonPayableTransactionObject<string>;

    borrowCaps(arg0: string): NonPayableTransactionObject<string>;

    borrowGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    borrowVerify(
      cToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkMembership(
      account: string,
      cToken: string
    ): NonPayableTransactionObject<boolean>;

    "claimComp(address,address[])"(
      holder: string,
      cTokens: string[]
    ): NonPayableTransactionObject<void>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean
    ): NonPayableTransactionObject<void>;

    "claimComp(address)"(holder: string): NonPayableTransactionObject<void>;

    closeFactorMantissa(): NonPayableTransactionObject<string>;

    compAccrued(arg0: string): NonPayableTransactionObject<string>;

    compBorrowState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    compContributorSpeeds(arg0: string): NonPayableTransactionObject<string>;

    compInitialIndex(): NonPayableTransactionObject<string>;

    compRate(): NonPayableTransactionObject<string>;

    compSpeeds(arg0: string): NonPayableTransactionObject<string>;

    compSupplierIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    compSupplyState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    enterMarkets(cTokens: string[]): NonPayableTransactionObject<string[]>;

    exitMarket(cTokenAddress: string): NonPayableTransactionObject<string>;

    getAccountLiquidity(account: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getAllMarkets(): NonPayableTransactionObject<string[]>;

    getAssetsIn(account: string): NonPayableTransactionObject<string[]>;

    getBlockNumber(): NonPayableTransactionObject<string>;

    getCompAddress(): NonPayableTransactionObject<string>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: number | string | BN,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    isComptroller(): NonPayableTransactionObject<boolean>;

    lastContributorBlock(arg0: string): NonPayableTransactionObject<string>;

    liquidateBorrowAllowed(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    liquidateBorrowVerify(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      actualRepayAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    liquidationIncentiveMantissa(): NonPayableTransactionObject<string>;

    markets(arg0: string): NonPayableTransactionObject<{
      isListed: boolean;
      collateralFactorMantissa: string;
      isComped: boolean;
      0: boolean;
      1: string;
      2: boolean;
    }>;

    maxAssets(): NonPayableTransactionObject<string>;

    mintAllowed(
      cToken: string,
      minter: string,
      mintAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    mintGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    mintVerify(
      cToken: string,
      minter: string,
      actualMintAmount: number | string | BN,
      mintTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    oracle(): NonPayableTransactionObject<string>;

    pauseGuardian(): NonPayableTransactionObject<string>;

    redeemAllowed(
      cToken: string,
      redeemer: string,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    redeemVerify(
      cToken: string,
      redeemer: string,
      redeemAmount: number | string | BN,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    repayBorrowAllowed(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    repayBorrowVerify(
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      borrowerIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    seizeAllowed(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    seizeGuardianPaused(): NonPayableTransactionObject<boolean>;

    seizeVerify(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferAllowed(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferGuardianPaused(): NonPayableTransactionObject<boolean>;

    transferVerify(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateContributorRewards(
      contributor: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    NewPendingImplementation(
      cb?: Callback<NewPendingImplementation>
    ): EventEmitter;
    NewPendingImplementation(
      options?: EventOptions,
      cb?: Callback<NewPendingImplementation>
    ): EventEmitter;

    NewImplementation(cb?: Callback<NewImplementation>): EventEmitter;
    NewImplementation(
      options?: EventOptions,
      cb?: Callback<NewImplementation>
    ): EventEmitter;

    NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter;
    NewPendingAdmin(
      options?: EventOptions,
      cb?: Callback<NewPendingAdmin>
    ): EventEmitter;

    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    "Failure(uint256,uint256,uint256)"(
      cb?: Callback<Failure_uint256_uint256_uint256>
    ): EventEmitter;
    "Failure(uint256,uint256,uint256)"(
      options?: EventOptions,
      cb?: Callback<Failure_uint256_uint256_uint256>
    ): EventEmitter;

    "Failure(uint256,uint256,uint256)"(
      cb?: Callback<Failure_uint256_uint256_uint256>
    ): EventEmitter;
    "Failure(uint256,uint256,uint256)"(
      options?: EventOptions,
      cb?: Callback<Failure_uint256_uint256_uint256>
    ): EventEmitter;

    "ActionPaused(string,bool)"(
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;
    "ActionPaused(string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;

    "ActionPaused(address,string,bool)"(
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;
    "ActionPaused(address,string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;

    CompGranted(cb?: Callback<CompGranted>): EventEmitter;
    CompGranted(
      options?: EventOptions,
      cb?: Callback<CompGranted>
    ): EventEmitter;

    CompSpeedUpdated(cb?: Callback<CompSpeedUpdated>): EventEmitter;
    CompSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<CompSpeedUpdated>
    ): EventEmitter;

    ContributorCompSpeedUpdated(
      cb?: Callback<ContributorCompSpeedUpdated>
    ): EventEmitter;
    ContributorCompSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<ContributorCompSpeedUpdated>
    ): EventEmitter;

    DistributedBorrowerComp(
      cb?: Callback<DistributedBorrowerComp>
    ): EventEmitter;
    DistributedBorrowerComp(
      options?: EventOptions,
      cb?: Callback<DistributedBorrowerComp>
    ): EventEmitter;

    DistributedSupplierComp(
      cb?: Callback<DistributedSupplierComp>
    ): EventEmitter;
    DistributedSupplierComp(
      options?: EventOptions,
      cb?: Callback<DistributedSupplierComp>
    ): EventEmitter;

    MarketEntered(cb?: Callback<MarketEntered>): EventEmitter;
    MarketEntered(
      options?: EventOptions,
      cb?: Callback<MarketEntered>
    ): EventEmitter;

    MarketExited(cb?: Callback<MarketExited>): EventEmitter;
    MarketExited(
      options?: EventOptions,
      cb?: Callback<MarketExited>
    ): EventEmitter;

    MarketListed(cb?: Callback<MarketListed>): EventEmitter;
    MarketListed(
      options?: EventOptions,
      cb?: Callback<MarketListed>
    ): EventEmitter;

    NewBorrowCap(cb?: Callback<NewBorrowCap>): EventEmitter;
    NewBorrowCap(
      options?: EventOptions,
      cb?: Callback<NewBorrowCap>
    ): EventEmitter;

    NewBorrowCapGuardian(cb?: Callback<NewBorrowCapGuardian>): EventEmitter;
    NewBorrowCapGuardian(
      options?: EventOptions,
      cb?: Callback<NewBorrowCapGuardian>
    ): EventEmitter;

    NewCloseFactor(cb?: Callback<NewCloseFactor>): EventEmitter;
    NewCloseFactor(
      options?: EventOptions,
      cb?: Callback<NewCloseFactor>
    ): EventEmitter;

    NewCollateralFactor(cb?: Callback<NewCollateralFactor>): EventEmitter;
    NewCollateralFactor(
      options?: EventOptions,
      cb?: Callback<NewCollateralFactor>
    ): EventEmitter;

    NewLiquidationIncentive(
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;
    NewLiquidationIncentive(
      options?: EventOptions,
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;

    NewPauseGuardian(cb?: Callback<NewPauseGuardian>): EventEmitter;
    NewPauseGuardian(
      options?: EventOptions,
      cb?: Callback<NewPauseGuardian>
    ): EventEmitter;

    NewPriceOracle(cb?: Callback<NewPriceOracle>): EventEmitter;
    NewPriceOracle(
      options?: EventOptions,
      cb?: Callback<NewPriceOracle>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "NewPendingImplementation",
    cb: Callback<NewPendingImplementation>
  ): void;
  once(
    event: "NewPendingImplementation",
    options: EventOptions,
    cb: Callback<NewPendingImplementation>
  ): void;

  once(event: "NewImplementation", cb: Callback<NewImplementation>): void;
  once(
    event: "NewImplementation",
    options: EventOptions,
    cb: Callback<NewImplementation>
  ): void;

  once(event: "NewPendingAdmin", cb: Callback<NewPendingAdmin>): void;
  once(
    event: "NewPendingAdmin",
    options: EventOptions,
    cb: Callback<NewPendingAdmin>
  ): void;

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "CompGranted", cb: Callback<CompGranted>): void;
  once(
    event: "CompGranted",
    options: EventOptions,
    cb: Callback<CompGranted>
  ): void;

  once(event: "CompSpeedUpdated", cb: Callback<CompSpeedUpdated>): void;
  once(
    event: "CompSpeedUpdated",
    options: EventOptions,
    cb: Callback<CompSpeedUpdated>
  ): void;

  once(
    event: "ContributorCompSpeedUpdated",
    cb: Callback<ContributorCompSpeedUpdated>
  ): void;
  once(
    event: "ContributorCompSpeedUpdated",
    options: EventOptions,
    cb: Callback<ContributorCompSpeedUpdated>
  ): void;

  once(
    event: "DistributedBorrowerComp",
    cb: Callback<DistributedBorrowerComp>
  ): void;
  once(
    event: "DistributedBorrowerComp",
    options: EventOptions,
    cb: Callback<DistributedBorrowerComp>
  ): void;

  once(
    event: "DistributedSupplierComp",
    cb: Callback<DistributedSupplierComp>
  ): void;
  once(
    event: "DistributedSupplierComp",
    options: EventOptions,
    cb: Callback<DistributedSupplierComp>
  ): void;

  once(event: "MarketEntered", cb: Callback<MarketEntered>): void;
  once(
    event: "MarketEntered",
    options: EventOptions,
    cb: Callback<MarketEntered>
  ): void;

  once(event: "MarketExited", cb: Callback<MarketExited>): void;
  once(
    event: "MarketExited",
    options: EventOptions,
    cb: Callback<MarketExited>
  ): void;

  once(event: "MarketListed", cb: Callback<MarketListed>): void;
  once(
    event: "MarketListed",
    options: EventOptions,
    cb: Callback<MarketListed>
  ): void;

  once(event: "NewBorrowCap", cb: Callback<NewBorrowCap>): void;
  once(
    event: "NewBorrowCap",
    options: EventOptions,
    cb: Callback<NewBorrowCap>
  ): void;

  once(event: "NewBorrowCapGuardian", cb: Callback<NewBorrowCapGuardian>): void;
  once(
    event: "NewBorrowCapGuardian",
    options: EventOptions,
    cb: Callback<NewBorrowCapGuardian>
  ): void;

  once(event: "NewCloseFactor", cb: Callback<NewCloseFactor>): void;
  once(
    event: "NewCloseFactor",
    options: EventOptions,
    cb: Callback<NewCloseFactor>
  ): void;

  once(event: "NewCollateralFactor", cb: Callback<NewCollateralFactor>): void;
  once(
    event: "NewCollateralFactor",
    options: EventOptions,
    cb: Callback<NewCollateralFactor>
  ): void;

  once(
    event: "NewLiquidationIncentive",
    cb: Callback<NewLiquidationIncentive>
  ): void;
  once(
    event: "NewLiquidationIncentive",
    options: EventOptions,
    cb: Callback<NewLiquidationIncentive>
  ): void;

  once(event: "NewPauseGuardian", cb: Callback<NewPauseGuardian>): void;
  once(
    event: "NewPauseGuardian",
    options: EventOptions,
    cb: Callback<NewPauseGuardian>
  ): void;

  once(event: "NewPriceOracle", cb: Callback<NewPriceOracle>): void;
  once(
    event: "NewPriceOracle",
    options: EventOptions,
    cb: Callback<NewPriceOracle>
  ): void;
}
